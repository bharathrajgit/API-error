const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const path = require('path')

const app = express()
app.use(express.json())

const dbPath = path.join(__dirname, 'twitterClone.db')
let db = null

const initializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (error) {
    console.log(`Error ${error.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const authenticateToken = (req, res, next) => {
  let jwtToken
  const authHeader = req.headers['authorization']
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(' ')[1]
  }
  if (jwtToken === undefined) {
    res.status(400)
    res.send('Missing JWT Token')
  } else {
    jwt.verify(jwtToken, 'My_Code', (error, payload) => {
      if (error) {
        res.status(401)
        res.send('Invalid JWT Token')
      } else {
        req.username = payload.username
        next()
      }
    })
  }
}

//API 1
app.post('/register/', async (req, res) => {
  const userDetails = req.body
  const {username, password, name, gender} = userDetails
  const hashPassword = await bcrypt.hash(password, 10)
  if (password.length < 6) {
    res.status(400)
    res.send('Password is too short')
  } else {
    const selectDbQuery = `SELECT * FROM user WHERE username = '${username}'`
    const dbUser = await db.get(selectDbQuery)
    if (dbUser !== undefined) {
      res.status(400)
      res.send('User already exists')
    } else {
      const registerDataQuery = `
            INSERT INTO user(username, password, name, gender)
            VALUES(
                '${username}',
                '${hashPassword}',
                '${name}',
                '${gender}'
            )`
      await db.run(registerDataQuery)
      res.send('User created successfully')
    }
  }
})

//API 2
app.post('/login/', async (req, res) => {
  const userDetails = req.body
  const {username, password} = userDetails
  const selectDbQuery = `SELECT * FROM user WHERE username = '${username}'`
  const dbUser = await db.get(selectDbQuery)
  if (dbUser === undefined) {
    res.status(400)
    res.send('Invalid user')
  } else {
    const isPasswordMatch = await bcrypt.compare(password, dbUser.password)
    if (isPasswordMatch === true) {
      let payload = {username: username}
      const jwtToken = jwt.sign(payload, 'My_Code')
      res.send({jwtToken})
    } else {
      res.status(400)
      res.send('Invalid password')
    }
  }
})

//API 3(Returns the lastest tweets of people whom the user follows. Return 4 tweets at a time)
app.get('/user/tweets/feed/', authenticateToken, async (req, res) => {
  const followingUser = `
  select  username, tweet, date_time AS dateTime
  from (follower INNER JOIN tweet ON follower.following_user_id = tweet.user_id) NATURAL JOIN user
  ORDER BY name ASC, date_time DESC
  LIMIT 4 OFFSET 0`
  const dbData = await db.all(followingUser)
  res.send(dbData)
})

//API 4(Returns the list of all names of people whom the user follows)
app.get('/user/following/', authenticateToken, async (req, res) => {
  const followingUser = `
  select user.name
  from user INNER JOIN follower ON (user.user_id = follower.following_user_id)`
  const dbData = await db.all(followingUser)
  res.send(dbData)
})

//API 5(Returns the list of all names of people who follows the user)
app.get('/user/followers/', authenticateToken, async (req, res) => {
  const followerUserQuery = `
  SELECT user.name 
  FROM user INNER JOIN follower ON user.user_id = follower.follower_user_id;`
  const userFollowerData = await db.all(followerUserQuery)
  res.send(userFollowerData)
})

//API 6
app.get('/tweets/:tweetId/', async (req, res) => {})

module.exports = app
